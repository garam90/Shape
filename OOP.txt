[OOP(Object-Oriented Programming)객체지향 프로그래밍]

1. 상속 ( Inheritance )
	<상속이란?>
	상속이란, 기존의 클래스를 재사용하여 새로운 클래스를 작성하는 것이다. 
	상속을 통해서 클래스를 작성하면 보다 적은 양의 코드로 새로운 클래스를 작성할 수 있고 코드를 
	공통적으로 관리할 수 있기 때문에 코드의 추가 및 변경이 매우 용이하다. 
	(코드의 재사용성을 높이고 코드의 중복을 제거하여 프로그램의 생산성과 유지보수에 크게 기여한다.)
	
	<상속에 필요한 문법>
	자바에서 상속을 구현하려면, 새로 작성하고자 하는 클래스의 이름 뒤에 상속받고자 하는 클래스의 
	이름을 키워드 ‘extends’와 함께 써 주기만 하면 된다.
	
	Example.------------------------------
	public class Circle extends Shape {
			//.....
	}
	--------------------------------------
	
2. 캡슐화( Encapsulation )
	클래스 설계시에 데이터와 기능을 클래스라는 틀에 넣어서 설계하고, 중요한 데이터나 복잡한 
	구현을 숨기고, 사용에 꼭 필요한 기능만을 공개하여 정의하는 기법을 캡슐화라 한다. 
	(Information Hiding , 정보은닉)
	- 중요하거나 상세한 구현은 숨긴다. (private 이용)
	- 접근에 필요한 기능만을 public하게 공개한다. 
	- setXxx( ), getXxx( )를 통해 접근, 제어한다. 
		  Attribute : private
		  Method : public
	- 중요한 데이터의 은닉과 보호
	- 복잡하고 상세한 구현을 숨김
	캡슐화를 적용하게 되면, 필요한 기능만 공개되어 있기 때문에 사용이 편리해지고, 코드의 
	유지보수를 용이하게 만든다.
	
	Example.------------------------------
	// getter, setter
	public class Circle 
	
		private int radius;
		
		public int getRadius() {
			return radius;
		}
	
		public void setRadius(int radius) {
			this.radius = radius;
		}
		
	}
	--------------------------------------
	// main에서의 사용
	Circle c = new Circle();
	c.setRadius(3);
	--------------------------------------
3. 다형성 ( Polymorphism )
	객체지향개념에서의 다형성이란 ‘여러가지 형태를 가질 수 있는 능력’을 의미한다.
	-object polymorphism : 같은 타입의 변수가 다양한 형태의 객체를 참조하는 것 
						   Super type의 변수가 다양한 sub type를 참조하는 형태를 의미한다.
						   
	Example.--------------------------------------------
		Circle 은 Shape Class 를 상속받았다.
		
		Shape c = new Shape();
		Sahpe c2 = new Circle();
	----------------------------------------------------

	-method polymorphism : 같은 클래스 타입의 같은 method를 호출 시 그 기능이 다양하게 처리 되어지는 것
	Example.--------------------------------------------
		메서드 호출 시 VM는 그 메서드가 Overriding되 어 있는지 여부를 확인하고, 
		생성된 객체의 상속관계에서 마지막 Overriding 된 메서드를 호출한다.
		draw(); 메서드는 Shape와 Circle 모두에 있다.
		Circle 에서 draw()를 오버라이딩했다면
		
		c.draw();
		c2.draw();
		
		두가지의 실행 결과는 다를 것이다.			
	----------------------------------------------------
	- 오버로딩(overloading)
		자바에서는 한 클래스 내에 이미 사용하려는 이름과 같은 이름을 가진 메서드가 있더라도 매개변수의 
		개수 또는 타입이 다르면, 같은 이름을 사용해서 메서드를 정의할 수 있다. 이처럼, 한 클래스 내에 같은 
		이름의 메서드를 여러 개 정의하는 것을 메서드 오버로딩, 간단히 오버로딩이라고 한다. 
		오버로딩의 사전적 의미는 많이 싣는 것을 뜻한다. 보통 하나의 메서드 이름에 하나의 기능만을 
		구현해야 하는데, 하나의 메서드 이름으로 여러 기능을 구현하기 때문에 붙여진 이름이라 생각할 수 
		있다.
		
		Example.----------------------------------------------
		// 생성자 오버로딩
		public AuthorVO(){
			
		}
		public AuthorVO(int id, String name, String bio) {
			super();
			this.id = id;
			this.name = name;
			this.bio = bio;
		}
		------------------------------------------------------
		
	- 오버라이딩(overriding)
		상속 받은 super의 method 중 특정 method의 내용을 수정, 추가하여 정의하는 것이다.
		(change, modify)
		- sub클래스의 Overriding되는 method는 상속받은 super클래스와 아래 내용이 반드시 같아야한다.
			method이름, parameter는 항상 같게
			Return type(일반적으로 같게 사용, sub class를 정의하여도 된다.)
		- Access modifier는 같거나 보다 넓은 범위로 정의해야 한다.
		
		Example.----------------------------------------------
			public  abstract class Shape{
				public abstract void draw();
			}
		------------------------------------------------------
			public class Circle extends Shape{
				public void draw(){
					System.out.println("원을 그립니다.");
				}
			}				
		------------------------------------------------------
	
	
	
	
	